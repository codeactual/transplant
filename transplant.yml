# This config file enables transplant to use itself to produce the copy published on GitHub.
# It also is linked from doc/ files as annotated example.
Ops:

  # This operation definition takes advantage of support for environment variables and parameterizes
  # several fields to support publishing to GitHub and also integration tests.
  #
  # (Originally there were two operations, "github" and "integration", which were exactly the
  # same except for file paths.)
  #
  # Required environment variables:
  # - ${origin_module_filepath}: absolute path to origin module
  # - ${origin_local_filepath}: relative path to target project root in the origin module
  # - ${copy_module_filepath}: absolute path to the copy destination
  # - ${copy_module_importpath}: "module" directive value to insert in the copy's go.mod
  #
  # This operation is selected in CLI commands by using the flag "--op github".
  github:

    From:

      # The module at this location contains the target project somewhere in its file tree.
      # The copy's go.mod versions will be synced with this module's versions, and shared
      # first-party dependencies will be automatically discovered and included in the copy
      # with import paths/names adjusted to fit the destination.
      ModuleFilePath: '${origin_module_filepath}'

      # The target project is located at this relative path under ${origin_module_filepath}.
      LocalFilePath: '${origin_local_filepath}'

      # Include these Go (fixtures) and various non-Go files in the copy.
      CopyOnlyFilePath:

        Include:

          # Go
          - 'internal/transplant/testdata/fixture'
          - 'internal/transplant/testdata/fixture/**/*'

          # Non-Go
          - 'LICENSE'
          - '**/*/LICENSE'
          - '.gitignore'
          - '.travis.yml'
          - '*.md'
          - '**/*/*.md'
          - 'doc/**/*'
          - 'Makefile.standalone'
          - 'transplant.yml'

        Exclude:

          # Files generated by test runs.
          - 'testdata/dynamic'
          - 'testdata/dynamic/**/*'

      # The root of the project tree in the origin (on the maintainer's dev environment) contains two Makefile
      # versions: "Makefile" for use when working in the origin module (and relies on shared includes),
      # and the "Makefile.standalone" intended for copies. Here we just ensure that copies receive the standalone
      # version but with the conventional name.
      RenameFilePath:
        - Old: '${origin_local_filepath}/Makefile.standalone'
          New: 'Makefile'

      # Include the target project's tests and its dependencies in the copy.
      Tests: true

    # Also allow the generated go.mod's "module" directive, and location of the copy's file tree, to be
    # defined externally.
    To:
      ModuleImportPath: '${copy_module_importpath}'
      ModuleFilePath: '${copy_module_filepath}'

      # LocalFilePath is undefined/empty, so the root From.LocalFilePath trees will be copied to
      # the root of To.ModuleFilePath.

    # These shared first-party dependencies only exist in the maintainer's non-public monorepo.
    Dep:

      # Most of the shared dependencies come from the "cage" tree, named after the "doge" directory
      # ("Digital Ocean Go Environment"?) described in https://blog.digitalocean.com/taming-your-go-dependencies/.
      #
      # Only the minimum set of packages will be included in the copy, based on analysis of the actual
      # dependencies of From.LocalFilePath files.
      - From:
          FilePath: 'cage'

          CopyOnlyFilePath:

            Include:

              - 'LICENSE'
              - 'README.md'

          # Include the Go and non-Go fixtures in the copy because test support for this Dep is enabled.
          # Use GoDescendantFilePath instead of CopyOnlyFilePath in order to minimize the fixtures included
          # based on the Go files that will be copied.
          GoDescendantFilePath:

            Include:

              - '**/testdata/fixture'
              - '**/testdata/fixture/**/*'
              - '**/testdata/fixture'
              - '**/testdata/fixture/**/*'

            Exclude:

              # Files generated by test runs.
              - 'testdata/dynamic'
              - 'testdata/dynamic/**/*'

          # In all files, replace all instances of the origin module's import path with To.ModuleImportPath.
          #
          # Reminder: The import statements in files matched by GoFilePath will always be converted to
          # the destination paths even without this config. Here we target string literals in test cases/fixtures.
          ReplaceString:
            ImportPath:
              Include:
                - '**/*'

          # Include the tests found in the same directory as discovered dependencies of the target project.
          # Also include the tests' dependencies in the copy.
          Tests: true

        # Copy the Dep to this path relative to To.ModuleFilePath.
        To:
          FilePath: 'internal/cage'

      # This Dep includes the package complementing the "go build -ldflags" customization in the copy's Makefile
      # to support the "transplant --version". (It should probably be moved into the "cage" package tree for
      # general refactoring concerns, but until then it provides multi-Dep example here).
      - From:
          FilePath: 'ldflags'

        # Copy the Dep to this path relative to To.ModuleFilePath.
        To:
          FilePath: 'internal/ldflags'

      # This Dep serves the same purpose as a Go vendor/ except that the third-party source code is often just
      # a small part of an existing open-source Go package, or even just a snippet from an origin like Stack
      # Overflow or Github Gist.
      - From:
          FilePath: 'third_party'
          CopyOnlyFilePath:
            Include:
              - '*.md'
              - '**/*/*.md'
        To:
          FilePath: 'internal/third_party'
